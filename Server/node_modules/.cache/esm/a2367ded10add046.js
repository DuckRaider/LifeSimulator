let Bank,BankAccount,User;_10a‍.x([["getAllUsers",()=>getAllUsers],["getUserById",()=>getUserById],["createUser",()=>createUser],["setBankAccountOfUser",()=>setBankAccountOfUser],["getAllBankAccounts",()=>getAllBankAccounts]]);_10a‍.w("../Models/Bank",[["Bank",["Bank"],function(v){Bank=v}]]);_10a‍.w("../Models/BankAccount",[["BankAccount",["BankAccount"],function(v){BankAccount=v}]]);_10a‍.w("../Models/User",[["User",["User"],function(v){User=v}]]);



// Controller function to get all users
       const getAllUsers = async (req, res) => {
    const users = await User.findAll({
        include:[{model:BankAccount, as:"BankAccounts"}]
    });

    if(users) res.status(200).json(users);
    else{
        _10a‍.g.console.error('Error fetching users:', error);
        res.status(500).send('Internal Server Error');
    }
};

       const getUserById = async (req, res) => {
    const user = await User.findAll({
        where:{
            id:req.query["id"]
        },
        include:[{model:BankAccount, as:"BankAccounts"}]
    });

    if(user) res.status(200).json(user);
    else{
        _10a‍.g.console.error('Error fetching users:', error);
        res.status(500).send('Internal Server Error');
    }
};

// Controller function to create a new user
       const createUser = async (req, res) => {
    const { username, email, password} = req.body;

    const newUser = await User.create({
        username,
        email,
        password
        /* other fields */
    });

    if(newUser) res.status(201).json(newUser);
    else{
        _10a‍.g.console.error('Error creating user:', error);
        res.status(500).send('Internal Server Error');
    }
};

       const setBankAccountOfUser = async (req, res) => {
    const {bank, user, iban} = req.body;

    const bankAccount = await BankAccount.create({
        iban:iban,
        balance:1000,
        // UserId:user.id,
        // BankId:bank.id
    })

    _10a‍.g.console.log(bankAccount)

    if(bankAccount){
        await bankAccount.setBank(bank)
        await bankAccount.setUser(user)
        res.status(201).json(bankAccount)
    }
    else{
        _10a‍.g.console.error('Error creating bankaccount:', error);
        res.status(500).send('Internal Server Error');
    }
}


       const getAllBankAccounts = async (req, res) => {
    const users = await BankAccount.findAll({
        include:[{model:Bank, as:"Bank"},{model:User, as:"User"}]
    });

    if(users) res.status(200).json(users);
    else{
        _10a‍.g.console.error('Error fetching users:', error);
        res.status(500).send('Internal Server Error');
    }
};