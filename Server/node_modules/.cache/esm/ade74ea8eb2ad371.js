let sequelize,DataTypes,Bank,User;_eb2‍.x([["BankAccount",()=>BankAccount]]);_eb2‍.w("../sequelize/sequelize",[["sequelize",["sequelize"],function(v){sequelize=v}]]);_eb2‍.w("sequelize",[["DataTypes",["DataTypes"],function(v){DataTypes=v}]]);_eb2‍.w("./Bank",[["Bank",["Bank"],function(v){Bank=v}]]);_eb2‍.w("./User",[["User",["User"],function(v){User=v}]]);




       const BankAccount = _eb2‍.a("sequelize",sequelize).define("BankAccounts", {
    iban:{
        type:_eb2‍.a("DataTypes",DataTypes).STRING,
        allowNull:false
    },
    balance:{
        type:_eb2‍.a("DataTypes",DataTypes).DOUBLE,
        allowNull:false
    },
    UserId:{
        type:_eb2‍.a("DataTypes",DataTypes).INTEGER,
        allowNull:false,
        references:{
            model:User,
            key:"id"
        }
    },
    BankId:{
        type:_eb2‍.a("DataTypes",DataTypes).INTEGER,
        allowNull:false,
        references:{
            model:Bank,
            key:"id"
        }
    }
});_eb2‍.j(["BankAccount"]);

BankAccount.belongsTo(_eb2‍.a("User",User),{
    foreignKey: "UserId",
    as: "User"
})
BankAccount.belongsTo(_eb2‍.a("Bank",Bank),{
    foreignKey:"BankId",
    as:"Bank"
})