let BankAccount,Transaction,sequelize;_28a‍.x([["getAllTransactions",()=>getAllTransactions],["createTransaction",()=>createTransaction]]);_28a‍.w("../Models/BankAccount",[["BankAccount",["BankAccount"],function(v){BankAccount=v}]]);_28a‍.w("../Models/Transaction",[["Transaction",["Transaction"],function(v){Transaction=v}]]);_28a‍.w("../sequelize/sequelize",[["sequelize",["sequelize"],function(v){sequelize=v}]]);



       const getAllTransactions = async (req,res) => {
    const transactions = await Transaction.findAll({
        include:[{model:BankAccount, as:"BankAccount"}]
    })

    if(transactions) res.status(200).json(transactions);
    else{
        res.status(500).send('Internal Server Error');
    }
}
       const createTransaction = async (req, res) => {
    const {source,target,amount} = req.body;

    // Create Transaction for both sides
    const t1 = transferMoney(source, target, -amount)
    const t2 = transferMoney(target, source, amount)

    if(t1 && t2) res.status(200).json([t1,t2])
    else{
        res.status(500).send('Internal Server Error');
    }
}
const transferMoney = async (source, target, amount) => {
    // works but the bankaccount attribute isn't correct
    const BankAccoountObj = await BankAccount.findAll({
        where:{
            iban:source
        }
    });

    _28a‍.g.console.log(BankAccoountObj[0].BankAccounts)

    const newTransaction = await Transaction.create({
        // source:source,
        // target:target,
        // amount:amount,
        // BankAccountId:BankAccoountObj.dataValues
    })

    if(newTransaction){
        const bankAccountSource = await BankAccount.update(
            {balance:sequelize.literal(`balance + ${amount}`)},
            {where:{iban:source}}
        )

        _28a‍.g.console.log(bankAccountSource)
        return bankAccountSource
    }
}